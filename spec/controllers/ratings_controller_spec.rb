require 'spec_helper'

# This spec was generated by rspec-rails when you ran the scaffold generator.
# It demonstrates how one might use RSpec to specify the controller code that
# was generated by Rails when you ran the scaffold generator.
#
# It assumes that the implementation code is generated by the rails scaffold
# generator.  If you are using any extension libraries to generate different
# controller code, this generated spec may or may not pass.
#
# It only uses APIs available in rails and/or rspec-rails.  There are a number
# of tools you can use to make these specs even more expressive, but we're
# sticking to rails and rspec-rails APIs to keep things simple and stable.
#
# Compared to earlier versions of this generator, there is very limited use of
# stubs and message expectations in this spec.  Stubs are only used when there
# is no simpler way to get a handle on the object needed for the example.
# Message expectations are only used when there is no simpler way to specify
# that an instance is receiving a specific message.

describe RatingsController do
  # This should return the minimal set of attributes required to create a valid
  # Rating. As you add validations to Rating, be sure to
  # update the return value of this method accordingly.
  def valid_attributes
    #@tour_user = Factory(:user)
    {
      :score => 4,
      :comment => "hello world"
    }
  end

  def build_rating
    rating = Rating.new valid_attributes
    rating.user = @user
    rating.tour = @tour
    rating.save
    rating
  end

  before(:each) do
    @tour_user = Factory(:user)
    @tour = Factory(:tour, :user => @tour_user)
  end

  describe "unauthenticated users" do
    it "shouldn't be allowed to edit" do
      get :edit, :tour_id => @tour, :id => 1
      response.should_not be_success
    end

    it "shouldn't be allowed to update" do
      put :update, :id => 1, :rating => valid_attributes
      response.should_not be_success
    end

    it "shouldn't be allowed to destroy" do
      delete :destroy, :id => 1
      response.should_not be_success
    end
  end

  describe "authenticated users" do
    before(:each) do
      @user = test_sign_in(@tour_user)
    end

    describe "GET show" do
      it "assigns the requested rating as @rating" do
        rating = build_rating
        get :show, :id => rating.id.to_s
        assigns(:rating).should eq(rating)
      end
    end

#    describe "GET new" do
#      it "assigns a new rating as @rating" do
#        get :new, :tour_id => @tour
#        assigns(:rating).should be_a_new(Rating)
#      end
#    end

    describe "GET edit" do
      it "assigns the requested rating as @rating" do
        rating = build_rating
        get :edit, :id => rating.id.to_s
        assigns(:rating).should eq(rating)
      end
    end

    describe "POST create" do
      describe "with valid params" do
        it "creates a new Rating" do
          expect {
            post :create,
                 :tour_id => @tour,
                 :rating => valid_attributes
          }.to change(Rating, :count).by(1)
        end

        it "assigns a newly created rating as @rating" do
          post :create, 
               :tour_id => @tour,
               :rating => valid_attributes
          assigns(:rating).should be_a(Rating)
          assigns(:rating).should be_persisted
        end

        it "redirects to the created rating" do
          post :create, 
               :tour_id => @tour,
               :rating => valid_attributes
          response.should redirect_to(@tour)
        end
      end

      describe "with invalid params" do
        it "assigns a newly created but unsaved rating as @rating" do
          # Trigger the behavior that occurs when invalid params are submitted
          Rating.any_instance.stub(:save).and_return(false)
          post :create, :tour_id => @tour, :rating => {}
          assigns(:rating).should be_a_new(Rating)
        end

        it "re-renders the 'new' template" do
          # Trigger the behavior that occurs when invalid params are submitted
          Rating.any_instance.stub(:save).and_return(false)
          post :create, :tour_id => @tour, :rating => {}
          response.should render_template("new")
        end
      end
    end

    describe "PUT update" do
      describe "with valid params" do
        it "updates the requested rating" do
          rating = build_rating
          # Assuming there are no other ratings in the database, this
          # specifies that the Rating created on the previous line
          # receives the :update_attributes message with whatever params are
          # submitted in the request.
          Rating.any_instance.should_receive(:update_attributes).with({'these' => 'params'})
          put :update, :id => rating.id, :rating => {'these' => 'params'}
        end

        it "assigns the requested rating as @rating" do
          rating = build_rating
          put :update, :id => rating.id, :rating => valid_attributes
          assigns(:rating).should eq(rating)
        end

        it "redirects to the rating" do
          rating = build_rating
          put :update, :id => rating.id, :rating => valid_attributes
          response.should redirect_to(rating)
        end
      end

      describe "with invalid params" do
        it "assigns the rating as @rating" do
          rating = build_rating
          # Trigger the behavior that occurs when invalid params are submitted
          Rating.any_instance.stub(:save).and_return(false)
          put :update, :id => rating.id.to_s, :rating => {}
          assigns(:rating).should eq(rating)
        end

        it "re-renders the 'edit' template" do
          rating = build_rating
          # Trigger the behavior that occurs when invalid params are submitted
          Rating.any_instance.stub(:save).and_return(false)
          put :update, :id => rating.id.to_s, :rating => {}
          response.should render_template("edit")
        end
      end
    end

    describe "DELETE destroy" do
      it "destroys the requested rating" do
        rating = build_rating
        expect {
          delete :destroy, :id => rating.id.to_s
        }.to change(Rating, :count).by(-1)
      end

      it "redirects to the ratings list" do
        rating = build_rating
        delete :destroy, :id => rating.id.to_s
        response.should redirect_to(@tour)
      end
    end
  end

end
